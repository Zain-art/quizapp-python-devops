name: CI/CD Pipeline for Flask Quiz App with AWS ECR # this is github action name

on:
  push:
    branches:
      - main
    paths:
      - 'QuizApp-Flask/**'
      - '.github/w  orkflows/**'    # Trigger on push to all branches
  pull_request:
    branches:
      - main  # Also run for PRs
permissions:
  contents: write  # Required to push changes to repo
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to get full git history for metadata

      # Step 2: Configure AWS credentials from GitHub Secrets
      - name: Configure AWS of my credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR using AWS credentials
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Extract branch name and short commit SHA for Docker tag
      - name: Extract Git metadata
        id: git-meta
        run: |
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Step 5: Display image tag in logs
      - name: Show Docker image tag
        run: |
          echo "Docker Image Tag: ${{ steps.git-meta.outputs.branch_name }}-${{ steps.git-meta.outputs.short_sha }}"

      # Step 6: Build and push Docker image to Amazon ECR
      - name: Build and push Docker image to Amazon ECR
        uses: docker/build-push-action@v4
        with:
          context: ./QuizApp-Flask
          file: ./QuizApp-Flask/Dockerfile
          push: true
          tags: ${{ secrets.ECR_REPOSITORY }}:${{ steps.git-meta.outputs.branch_name }}-${{ steps.git-meta.outputs.short_sha }}

      # Step 7: Update the Kubernetes deployment YAML with the new image tag
      - name: Update deployment manifest with new image tag
        run: |
          ls -l k8s-manifest/quiz-deployment.yaml 
          sed -i "s|image: .*|image: ${{ secrets.ECR_REPOSITORY }}:${{ steps.git-meta.outputs.branch_name }}-${{ steps.git-meta.outputs.short_sha }}|" k8s-manifest/quiz-deployment.yaml

      # Step 8: Commit and push the updated manifest to Git (triggers ArgoCD GitOps)
      - name: Commit updated manifest
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git pull origin ${{ github.ref_name }}  # Ensure local is up-to-date
          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add k8s-manifest/quiz-deployment.yaml
            git commit -m "ci: update image to ${{ steps.git-meta.outputs.branch_name }}-${{ steps.git-meta.outputs.short_sha }}"
            git push https://x-access-token:${{ secrets.GT_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}
          fi

      # Step 9: Manually trigger ArgoCD sync (if auto-sync is disabled)
      # - name: Sync ArgoCD application
      #   env:
          # ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
      #     ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      #   run: |
      #     curl -k -H "Authorization: Bearer $ARGOCD_AUTH_TOKEN" \
      #          -X POST "$ARGOCD_SERVER/api/v1/applications/quiz-app/sync"
